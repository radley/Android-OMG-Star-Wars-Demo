// Generated by Dagger (https://google.github.io/dagger).
package dev.radley.omgstarwars.dagger;

import dagger.internal.Preconditions;
import dev.radley.omgstarwars.network.StarWarsService;
import dev.radley.omgstarwars.network.StarWarsService_MembersInjector;
import dev.radley.omgstarwars.viewmodels.CategoryViewModel;
import dev.radley.omgstarwars.viewmodels.CategoryViewModel_MembersInjector;
import dev.radley.omgstarwars.viewmodels.DetailViewModel;
import dev.radley.omgstarwars.viewmodels.DetailViewModel_MembersInjector;
import dev.radley.omgstarwars.viewmodels.SearchViewModel;
import dev.radley.omgstarwars.viewmodels.SearchViewModel_MembersInjector;

public final class DaggerApiComponent implements ApiComponent {
  private ApiModule apiModule;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.apiModule = builder.apiModule;
  }

  @Override
  public void inject(StarWarsService service) {
    injectStarWarsService(service);
  }

  @Override
  public void inject(CategoryViewModel viewModel) {
    injectCategoryViewModel(viewModel);
  }

  @Override
  public void inject(DetailViewModel viewModel) {
    injectDetailViewModel(viewModel);
  }

  @Override
  public void inject(SearchViewModel viewModel) {
    injectSearchViewModel(viewModel);
  }

  private StarWarsService injectStarWarsService(StarWarsService instance) {
    StarWarsService_MembersInjector.injectApi(
        instance, ApiModule_ProvideStarWarsApiFactory.proxyProvideStarWarsApi(apiModule));
    return instance;
  }

  private CategoryViewModel injectCategoryViewModel(CategoryViewModel instance) {
    CategoryViewModel_MembersInjector.injectService(
        instance, ApiModule_ProvideStarWarsServiceFactory.proxyProvideStarWarsService(apiModule));
    return instance;
  }

  private DetailViewModel injectDetailViewModel(DetailViewModel instance) {
    DetailViewModel_MembersInjector.injectService(
        instance, ApiModule_ProvideStarWarsServiceFactory.proxyProvideStarWarsService(apiModule));
    return instance;
  }

  private SearchViewModel injectSearchViewModel(SearchViewModel instance) {
    SearchViewModel_MembersInjector.injectService(
        instance, ApiModule_ProvideStarWarsServiceFactory.proxyProvideStarWarsService(apiModule));
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }
  }
}
